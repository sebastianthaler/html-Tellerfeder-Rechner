/* Dies ist der CSS-Bereich. */

html{
    font-size: 16px; /* Bezugsgröße: Aufrufbar als 1rem, bzw so skalierbar. */
    font-family: sans-serif; /* Sans-serif ist Arial, andere Optionen Helvetica, Fira Sans, Noto Sans, etc. */
}

/* Größeneinheiten:
    - Pixel (px) ist ein absolutes Maß. Je nach Auflösung des Bildschirms entspricht 1 px unterschiedlich vielen physischen Pixeln.
    - Prozent (%) bezieht sich auf die Größe des direkten Elternelements im HTML-Code.
    - Viewport width (vw) bezieht sich auf den sichtbare Breite des Browsers. 1vm ist 1% dieses Bereichs.
    - Viewport height (vh) ist dasselbe für die sichtbare Höhe.
*/

/* Stil für die gesamte Seite. Steuert auch wie der Standard-Container auf der Seite angeordnet wird. */ 
body {
    background-color: #868585;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
    margin-top: 20px;
    overflow-y: auto;
}

/* Stile für Überschriften der verschiedenen Stufen. */
h1 {
    font-size: 2.0rem;
    color: #333;
    text-align: center;
    margin-bottom: 20px;
}
h2 {
    font-size: 1.2rem;
    color: #666;
    margin-bottom: 20px;
}

/* Allgemeiner Stil für Button Definition des Hover-Effekts. */
button {
    cursor: pointer;
    display: block; /* Normalerweise verhält sich ein button wie ein inline-block Element. Diese werden in einer Zeile nebeneinander angeordnet. Ein block Element erzwingt vorher und nacher einen Umbruch.*/
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 4px;
    margin-top: 20px;
    background-color: #5cb85c;
    transition: background-color 0.3s ease;
    font-size: 1.0rem;
    font-weight: bold;
    color: rgb(255, 255, 255);
}
button:hover {
    background-color: #aadfaa;
    color: #333;
}

/* Stil für den Container in dem alle Inhalte angeordnet werden. Dieser Stil wird einem div-Element als Klasse zugeordnet. */
.container-standard {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    width: 600px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin-top: 20px;
}

/* Test für horizontale Linie mit Text. Eine einfache horizontale Linie geht mit <hr>. */
.line-with-text-left {
    display: flex;
    align-items: center;
    color: #555;
}
.line-with-text-left::after {
    content: "";
    flex: 1;
    border-bottom: 3px solid #ccc;
    margin-left: 1em;
}

/* Standard-Stil für Beschreibungstexte. */
.description {
    font-size: 1.0rem;
    color: #666;
    margin-bottom: 20px;
}

/* Stil für die Eigabegruppe, in der Label, Eingabefeld und Dropdownmenü einzeilig angeordnet werden können. Es folgen die Klassen mit den Stilen für die einzelnen Elemente. */
.input-group {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}
.input-description {
    height: 35px;
    display: flex;
    align-items: center;
    width: 250px;
    font-size: 1.0rem;
    font-weight: bold;
}
.input-label {
    height: 35px;
    display: flex;
    align-items: center;
    width: 100px;
    font-size: 1.0rem;
}
.input-field {
    height: 35px;
    box-sizing: border-box;
    padding: 10px;
    flex-grow: 0;
    width: 150px;
    font-size: 1rem;
}
.input-dropdown {
    height: 35px;
    box-sizing: border-box;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 10px;
    flex-grow: 0;
    flex-shrink: 0;
    width: auto;
    font-size: 0.9em;
}

/* Stile für die Ausgabe. */
/* Container für die gesamte Ausgabegruppe */
.output-group-container {
    margin-top: 20px; /* Abstand nach oben */
    margin-bottom: 20px; /* Abstand nach unten */
}
/* Definiert eine einzelne Zeile innerhalb des Containers */
.output-row {
    display: flex; /* Ordnet die Elemente nebeneinander an */
    justify-content: space-between; /* Verteilt den Platz gleichmäßig */
    margin-bottom: 10px; /* Abstand zwischen den Zeilen */
}
/* Container für ein einzelnes Wertepaar (Beschreibung und Feld) */
.output-item {
    display: flex; /* Ordnet Beschreibung und Feld nebeneinander an */
    align-items: center; /* Zentriert die Elemente vertikal */
    width: 48%; /* Nimmt knapp die Hälfte der Zeilenbreite ein */
}
.output-description {
    font-weight: bold;
    font-size: 1.0rem;
    color: #333;
    width: 120px; /* Feste Breite für eine saubere Ausrichtung */
}
.output-field {
    height: 35px;
    box-sizing: border-box;
    padding: 10px;
    flex-grow: 0;
    width: 150px; /* Gleiche Breite wie input-field für Ausrichtung */
    font-size: 1rem;
    background-color: #e9e9e9; /* Leichter Grauton zur Unterscheidung */
    border: 1px solid #ccc;
    border-radius: 4px;
    display: flex;
    align-items: center; /* Vertikale Zentrierung des Textes */
}

/* Stil für den Plot. Im Gegensatz zum . der den Stil allen Elemente mit der jeweiligen Klasse zuordnet. Ordnet # den Stil den Elementen mit der ID zu.*/
#plotCanvas {
    max-width: 100%;
    max-height: 500px;
    background-color: #ffffff;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-bottom: 20px;
}

/* Stil für die Gruppe mit horizontal angeordeten radio-Elementen mit Label. Bei radio-Elementen kann immer nur eine Auswahlmöglichkeit einer Gruppe (definiert durch name = x im HTML-Teil) aktiviert werden. */
.radio-group-container {
    display: flex;
    align-items: center;
    gap: 10px;
}
/* Stil für das Label eines radio-buttons. Das Label wird im HTML-Teil durch for = id dem jeweiligen Element zugeordnet. */ 
.radio-group-container label {
    font-weight: normal;
    font-size: 0.95rem;
    margin-left: 5px;
    margin-right: 15px;
}